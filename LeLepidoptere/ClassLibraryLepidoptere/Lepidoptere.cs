///////////////////////////////////////////////////////////
//  Lepidoptere.cs
//  Implementation of the Class Lepidoptere
//  Generated by Enterprise Architect
//  Created on:      09-juin-2021 11:30:09
//  Original author: kassim
///////////////////////////////////////////////////////////


using LeLepidoptere.LesStadeEvo;


namespace LeLepidoptere {
	public class Lepidoptere {

		private string nom;
        private StadeDEvolution sonstadeCourant;
         

		public string Nom { get => nom;}
        public StadeDEvolution SonstadeCourant { get => sonstadeCourant; }

        //public Lepidoptere(string _nom, StadeDEvolution _SonstadeCourant)
        //{
        //    nom = _nom;
        //    sonstadeCourant = _SonstadeCourant;
        //}
        public Lepidoptere(string nom)
        {
            this.nom = nom;
            this.sonstadeCourant =new Oeuf();
        
        }



        public void SeDeplacer(){
            sonstadeCourant.SeDeplacer();

		}

		public void SeTransformer(){
            //if (sonstadeCourant is Oeuf||sonstadeCourant is Chenille ||sonstadeCourant is Chrysalide  )
            //{
            //    sonstadeCourant.ProchaintStade();

            //}
            //else if (sonstadeCourant is Papillon)
            //{
            //    throw new System.Exception("Je ne peut pas me transformer");
            //}
            sonstadeCourant = sonstadeCourant.ProchaintStade();

		}
        public override string ToString()
        {
            return base.ToString() ;
        }

    }//end Lepidoptere

}//end namespace Lepidoptere